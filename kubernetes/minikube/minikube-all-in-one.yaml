apiVersion: v1
kind: ConfigMap
metadata:
  name: nebula-graphd
  namespace: default
data:
  nebula-graphd.conf: |
    ########## basics ##########
    # Whether to run as a daemon process  
    --daemonize=false
    # The file to host the process id
    --pid_file=pids/nebula-graphd.pid
    ########## logging ##########
    # The directory to host logging files, which must already exists
    --log_dir=logs
    # Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively
    --minloglevel=0
    # Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging
    --v=0
    # Maximum seconds to buffer the log messages
    --logbufsecs=0
    # Whether to redirect stdout and stderr to separate output files
    --redirect_stdout=true
    # Destination filename of stdout and stderr, which will also reside in log_dir.
    --stdout_log_file=stdout.log
    --stderr_log_file=stderr.log
    # Copy log messages at or above this level to stderr in addition to logfiles. The numbers of severity levels INFO, WARNING, ERROR, and FATAL are 0, 1, 2, and 3, respectively.
    --stderrthreshold=2
    ########## networking ##########
    # Meta Server Address
    --meta_server_addrs=nebula-metad-0.nebula-metad:44500
    # Local ip
    --local_ip=0.0.0.0
    # Network device to listen on
    --listen_netdev=any
    # Port to listen on
    --port=3699
    # To turn on SO_REUSEPORT or not
    --reuse_port=false
    # Backlog of the listen socket, adjust this together with net.core.somaxconn
    --listen_backlog=1024
    # Seconds before the idle connections are closed, 0 for never closed
    --client_idle_timeout_secs=0
    # Seconds before the idle sessions are expired, 0 for no expiration
    --session_idle_timeout_secs=60000
    # The number of threads to accept incoming connections
    --num_accept_threads=1
    # The number of networking IO threads, 0 for # of CPU cores
    --num_netio_threads=0
    # The number of threads to execute user queries, 0 for # of CPU cores
    --num_worker_threads=0
    # HTTP service ip
    --ws_ip=0.0.0.0
    # HTTP service port
    --ws_http_port=13000
    # HTTP2 service port
    --ws_h2_port=13002

--- 
apiVersion: v1
kind: ConfigMap
metadata:
  name: nebula-metad
  namespace: default
data:
  nebula-metad.conf: |
    ########## basics ##########
    # Whether to run as a daemon process
    --daemonize=false
    # The file to host the process id
    --pid_file=pids/nebula-metad.pid
    ########## logging ##########
    # The directory to host logging files, which must already exists
    --log_dir=logs
    # Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively
    --minloglevel=0
    # Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging
    --v=0
    # Maximum seconds to buffer the log messages
    --logbufsecs=0
    ########## networking ##########
    # Meta Server Address
    --meta_server_addrs=nebula-metad-0.nebula-metad:44500
    # Local ip
    --local_ip=0.0.0.0
    # Meta daemon listening port
    --port=44500
    # HTTP service ip
    --ws_ip=0.0.0.0
    # HTTP service port
    --ws_http_port=11000
    # HTTP2 service port
    --ws_h2_port=11002

    ########## storage ##########
    # Root data path, here should be only single path for metad
    --data_path=data/meta

    ########## Misc #########
    # The default number of parts when a space is created
    --default_parts_num=100
    # The default replica factor when a space is created
    --default_replica_factor=1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nebula-storaged 
  namespace: default
data:
  nebula-storaged.conf: |
    ########## basics ##########
    # Whether to run as a daemon process
    --daemonize=false
    # The file to host the process id
    --pid_file=pids/nebula-storaged.pid

    ########## logging ##########
    # The directory to host logging files, which must already exists
    --log_dir=logs
    # Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively
    --minloglevel=0
    # Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging
    --v=0
    # Maximum seconds to buffer the log messages
    --logbufsecs=0
    ########## networking ##########
    # Meta server address
    --meta_server_addrs=nebula-metad-0.nebula-metad:44500
    # Local ip
    --local_ip=0.0.0.0
    # Storage daemon listening port
    --port=44500
    # HTTP service ip
    --ws_ip=0.0.0.0
    # HTTP service port
    --ws_http_port=12000
    # HTTP2 service port
    --ws_h2_port=12002

    ########## storage ##########
    # Root data path, multiple paths should be splitted by comma.
    # One path per instance, if --engine_type is `rocksdb'
    --data_path=data/storage

    # The default reserved bytes for one batch operation
    --rocksdb_batch_size=4096
    # The default block cache size used in BlockBasedTable.
    # The unit is MB.
    --rocksdb_block_cache=4
    # The type of storage engine, `rocksdb', `memory', etc.
    --engine_type=rocksdb

    ############## rocksdb Options ##############
    --rocksdb_disable_wal=true
    # rocksdb DBOptions in json, each name and value of option is a string, given as "option_name":"option_value" separated by comma
    --rocksdb_db_options={}
    # rocksdb ColumnFamilyOptions in json, each name and value of option is string, given as "option_name":"option_value" separated by comma
    --rocksdb_column_family_options={"write_buffer_size":"67108864","max_write_buffer_number":"4","max_bytes_for_level_base":"268435456"}
    # rocksdb BlockBasedTableOptions in json, each name and value of option is string, given as "option_name":"option_value" separated by comma
    --rocksdb_block_based_table_options={"block_size":"8192"}

--- 
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nebula-metad
  name: nebula-metad
  namespace: default
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  publishNotReadyAddresses: true
  ports:
  - name: thrift
    port: 44500
  - name: raft
    port: 44501
  - name: http
    port: 11000
  - name: http2
    port: 11002
  selector:
    app: nebula-metad
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nebula-storaged
  name: nebula-storaged
  namespace: default
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"  
spec:
  publishNotReadyAddresses: true
  ports:
  - name: thrift
    port: 44500
  - name: raft
    port: 44501
  - name: http
    port: 12000
  - name: http2
    port: 12002
  selector:
    app: nebula-storaged
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nebula-graphd
  name: nebula-graphd
  namespace: default
spec:
  selector:
    matchLabels:
      app: nebula-graphd
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate  
  template:
    metadata:
      labels:
        app: nebula-graphd
    spec:
      restartPolicy: Always
      containers:
      - name: nebula-graphd
        image: "vesoft/nebula-graphd:nightly"
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/nebula/bin/nebula-graphd", "--flagfile=/usr/local/nebula/etc/nebula-graphd.conf"]     
        livenessProbe:
          httpGet:
            path: /status
            port: 13000
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          #TODO: Change these to appropriate values for the hardware that you're running.        
          requests:
            cpu: "200m"
            memory: "256Mi"        
          limits:
            cpu: "200m" 
            memory: "256Mi"
        volumeMounts:
        - name: config 
          mountPath: /usr/local/nebula/etc/
      volumes:
      - name: config 
        configMap: 
          name: nebula-graphd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nebula-metad
  namespace: default
spec:
  serviceName: nebula-metad
  replicas: 1
  selector:
    matchLabels:
      app: nebula-metad
  template:
    metadata:
      labels:
        app: nebula-metad
    spec:
      terminationGracePeriodSeconds: 60
      # hostname: meta.nebula.services
      restartPolicy: Always
      containers:
      - name: nebula-metad
        image: "vesoft/nebula-metad:nightly"
        imagePullPolicy: IfNotPresent
        resources:
          #TODO: Change these to appropriate values for the hardware that you're running.        
          requests:
            cpu: "200m"
            memory: "256Mi"        
          limits:
            cpu: "200m" 
            memory: "256Mi"
        command: 
          - "/bin/bash"
          - "-ecx"
          - "exec /usr/local/nebula/bin/nebula-metad --flagfile=/usr/local/nebula/etc/nebula-metad.conf --local_ip=$(hostname -i)"
        livenessProbe:
          httpGet:
            path: /status
            port: 11000
          initialDelaySeconds: 30
          timeoutSeconds: 5     
        volumeMounts:
        - name: config 
          mountPath: /usr/local/nebula/etc/
        - name: data
          mountPath: /usr/local/nebula/data/
      volumes:
      - name: config 
        configMap: 
          name: nebula-metad
      - name: data
        hostPath:
          path: /nebula

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nebula-storaged
  namespace: default
spec:
  serviceName: nebula-storaged
  replicas: 1
  selector:
    matchLabels:
      app: nebula-storaged
  template:
    metadata:
      labels:
        app: nebula-storaged
    spec:
      terminationGracePeriodSeconds: 60
      restartPolicy: Always
      containers:
      - name: nebula-storaged
        image: "vesoft/nebula-storaged:nightly"
        imagePullPolicy: IfNotPresent
        resources:
          #TODO: Change these to appropriate values for the hardware that you're running.        
          requests:
            cpu: "200m"
            memory: "256Mi"        
          limits:
            cpu: "200m" 
            memory: "256Mi"
        command: 
          - "/bin/bash"
          - "-ecx"
          - "exec /usr/local/nebula/bin/nebula-storaged --flagfile=/usr/local/nebula/etc/nebula-storaged.conf --local_ip=$(hostname -i)"         
        livenessProbe:
          httpGet:
            path: /status
            port: 12000
          initialDelaySeconds: 30
          timeoutSeconds: 5     
        volumeMounts:
        - name: config
          mountPath: /usr/local/nebula/etc/
        - name: data
          mountPath: /usr/local/nebula/data/
      volumes:
      - name: config
        configMap: 
          name: nebula-storaged
      - name: data
        hostPath:
            path: /nebula